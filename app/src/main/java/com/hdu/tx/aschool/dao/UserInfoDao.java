package com.hdu.tx.aschool.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hdu.tx.aschool.dao.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LoadTimes = new Property(1, Integer.class, "loadTimes", false, "LOAD_TIMES");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Nickname = new Property(3, String.class, "nickname", false, "NICKNAME");
        public final static Property Level = new Property(4, Integer.class, "level", false, "LEVEL");
        public final static Property School = new Property(5, String.class, "school", false, "SCHOOL");
        public final static Property Major = new Property(6, String.class, "major", false, "MAJOR");
        public final static Property Headimg_url = new Property(7, String.class, "headimg_url", false, "HEADIMG_URL");
        public final static Property PhoneNumber = new Property(8, String.class, "phoneNumber", false, "PHONE_NUMBER");
        public final static Property IsBindPhone = new Property(9, Boolean.class, "isBindPhone", false, "IS_BIND_PHONE");
        public final static Property Grade = new Property(10, String.class, "grade", false, "GRADE");
        public final static Property Institute = new Property(11, String.class, "institute", false, "INSTITUTE");
        public final static Property Sex = new Property(12, String.class, "sex", false, "SEX");
        public final static Property City = new Property(13, String.class, "city", false, "CITY");
        public final static Property Age = new Property(14, String.class, "age", false, "AGE");
        public final static Property InterestTabs = new Property(15, String.class, "interestTabs", false, "INTEREST_TABS");
    };


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LOAD_TIMES\" INTEGER," + // 1: loadTimes
                "\"USERNAME\" TEXT," + // 2: username
                "\"NICKNAME\" TEXT," + // 3: nickname
                "\"LEVEL\" INTEGER," + // 4: level
                "\"SCHOOL\" TEXT," + // 5: school
                "\"MAJOR\" TEXT," + // 6: major
                "\"HEADIMG_URL\" TEXT," + // 7: headimg_url
                "\"PHONE_NUMBER\" TEXT," + // 8: phoneNumber
                "\"IS_BIND_PHONE\" INTEGER," + // 9: isBindPhone
                "\"GRADE\" TEXT," + // 10: grade
                "\"INSTITUTE\" TEXT," + // 11: institute
                "\"SEX\" TEXT," + // 12: sex
                "\"CITY\" TEXT," + // 13: city
                "\"AGE\" TEXT," + // 14: age
                "\"INTEREST_TABS\" TEXT);"); // 15: interestTabs
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer loadTimes = entity.getLoadTimes();
        if (loadTimes != null) {
            stmt.bindLong(2, loadTimes);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(4, nickname);
        }
 
        Integer level = entity.getLevel();
        if (level != null) {
            stmt.bindLong(5, level);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(6, school);
        }
 
        String major = entity.getMajor();
        if (major != null) {
            stmt.bindString(7, major);
        }
 
        String headimg_url = entity.getHeadimg_url();
        if (headimg_url != null) {
            stmt.bindString(8, headimg_url);
        }
 
        String phoneNumber = entity.getPhoneNumber();
        if (phoneNumber != null) {
            stmt.bindString(9, phoneNumber);
        }
 
        Boolean isBindPhone = entity.getIsBindPhone();
        if (isBindPhone != null) {
            stmt.bindLong(10, isBindPhone ? 1L: 0L);
        }
 
        String grade = entity.getGrade();
        if (grade != null) {
            stmt.bindString(11, grade);
        }
 
        String institute = entity.getInstitute();
        if (institute != null) {
            stmt.bindString(12, institute);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(13, sex);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(14, city);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(15, age);
        }
 
        String interestTabs = entity.getInterestTabs();
        if (interestTabs != null) {
            stmt.bindString(16, interestTabs);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // loadTimes
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nickname
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // level
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // school
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // major
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // headimg_url
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phoneNumber
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isBindPhone
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // grade
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // institute
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sex
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // city
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // age
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // interestTabs
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLoadTimes(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNickname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLevel(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setSchool(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMajor(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHeadimg_url(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhoneNumber(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsBindPhone(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setGrade(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setInstitute(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSex(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setCity(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAge(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setInterestTabs(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
