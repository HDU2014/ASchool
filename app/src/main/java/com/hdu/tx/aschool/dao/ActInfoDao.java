package com.hdu.tx.aschool.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hdu.tx.aschool.dao.ActInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACT_INFO".
*/
public class ActInfoDao extends AbstractDao<ActInfo, Long> {

    public static final String TABLENAME = "ACT_INFO";

    /**
     * Properties of entity ActInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Hostname = new Property(1, String.class, "hostname", false, "HOSTNAME");
        public final static Property ImageUrl = new Property(2, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Time = new Property(4, String.class, "time", false, "TIME");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property Describe = new Property(6, String.class, "describe", false, "DESCRIBE");
        public final static Property HostId = new Property(7, String.class, "hostId", false, "HOST_ID");
        public final static Property LookTimes = new Property(8, Integer.class, "lookTimes", false, "LOOK_TIMES");
        public final static Property CollectTimes = new Property(9, Integer.class, "collectTimes", false, "COLLECT_TIMES");
        public final static Property Totalpeopel = new Property(10, Integer.class, "totalpeopel", false, "TOTALPEOPEL");
        public final static Property Joinedpeopel = new Property(11, Integer.class, "joinedpeopel", false, "JOINEDPEOPEL");
    };


    public ActInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ActInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"HOSTNAME\" TEXT," + // 1: hostname
                "\"IMAGE_URL\" TEXT," + // 2: imageUrl
                "\"TITLE\" TEXT," + // 3: title
                "\"TIME\" TEXT," + // 4: time
                "\"ADDRESS\" TEXT," + // 5: address
                "\"DESCRIBE\" TEXT," + // 6: describe
                "\"HOST_ID\" TEXT," + // 7: hostId
                "\"LOOK_TIMES\" INTEGER," + // 8: lookTimes
                "\"COLLECT_TIMES\" INTEGER," + // 9: collectTimes
                "\"TOTALPEOPEL\" INTEGER," + // 10: totalpeopel
                "\"JOINEDPEOPEL\" INTEGER);"); // 11: joinedpeopel
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACT_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ActInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String hostname = entity.getHostname();
        if (hostname != null) {
            stmt.bindString(2, hostname);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(3, imageUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(5, time);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String describe = entity.getDescribe();
        if (describe != null) {
            stmt.bindString(7, describe);
        }
 
        String hostId = entity.getHostId();
        if (hostId != null) {
            stmt.bindString(8, hostId);
        }
 
        Integer lookTimes = entity.getLookTimes();
        if (lookTimes != null) {
            stmt.bindLong(9, lookTimes);
        }
 
        Integer collectTimes = entity.getCollectTimes();
        if (collectTimes != null) {
            stmt.bindLong(10, collectTimes);
        }
 
        Integer totalpeopel = entity.getTotalpeopel();
        if (totalpeopel != null) {
            stmt.bindLong(11, totalpeopel);
        }
 
        Integer joinedpeopel = entity.getJoinedpeopel();
        if (joinedpeopel != null) {
            stmt.bindLong(12, joinedpeopel);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ActInfo readEntity(Cursor cursor, int offset) {
        ActInfo entity = new ActInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // hostname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageUrl
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // describe
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // hostId
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // lookTimes
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // collectTimes
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // totalpeopel
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // joinedpeopel
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ActInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setHostname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDescribe(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHostId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLookTimes(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCollectTimes(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTotalpeopel(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setJoinedpeopel(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ActInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ActInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
